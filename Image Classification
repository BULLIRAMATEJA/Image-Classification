{
  "nbformat": 4,
  "nbformat_minor": 5,
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.8.8"
    },
    "colab": {
      "name": "New Updated.ipynb",
      "provenance": [],
      "collapsed_sections": []
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_9TOYSEPjjVv"
      },
      "source": [
        "\n",
        "\n",
        "Data Link: http://www.cs.toronto.edu/~kriz/cifar.html\n"
      ],
      "id": "_9TOYSEPjjVv"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "nrvpA55RjoLy"
      },
      "source": [
        "# Business Problem\n",
        "\n",
        "CAPTCHA is an acronym that stands for Completely Automated Public Turing test to differentiate Computers and Humans on the internet.\n",
        "\n",
        "Considering the advances in AI and machine learning, maintaining internet security has become more challenging. We've recently seen a shift from text-based CAPTCHAs to image-based CAPTCHAs. This resulted from the need to make text-based CAPTCHAs more difficult for AIs. However, those CAPTCHAs became a struggle for humans as well. As such, images are the next frontier. But how long can this last before AIs become even more intelligent and machine learning becomes even more advanced?\n",
        "\n",
        "We will see how possible it is for humans to build a neural network that can pass through these CAPTCHA challenges using a dataset with 60000 random images of 10 different categories: airplane, automobile, bird, cat, deer, dog, frog, horse, ship, and truck. Each category has 6000 images. We like to think we’re tackling this problem from the perspective of white hat hackers who are testing the rigor of current virtual security measures against spam/hackers/other negative internet agents.\n",
        "\n",
        "CAPTCHA companies, such as Google or the primary CAPTCHA company, would be interested in models like these examine how strong their security measures are, and by exploiting weaknesses in the model, could implementing new images or tactics to lower the accuracy of our model to improve the CAPTCHAs in the future."
      ],
      "id": "nrvpA55RjoLy"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "rbAVCJqmjswP"
      },
      "source": [
        "# Works Cited\n",
        "- Alqahtani, Fatmah, and Fawaz Alsulaiman. “Is image-based CAPTCHA secure against attacks based on machine learning? An experimental study.” Science Direct, 2019, https://doi.org/10.1016/j.cose.2019.101635. Accessed 20 October 2021.\n",
        "- Arai, Tsuyoshi, et al. “Precursory Analysis of Attack-Log Time Series by Machine Learning for Detecting Bots in CAPTCHA.” IEEE Explore, 2021, https://ieeexplore.ieee.org/abstract/document/9333881?casa_token=TPQqOle5D9cAAAAA:CiHVG_aNa9DbVrJaKcrAz9kpBy8xW5MP2CbscLfwpVxBo8lunaio4vELx1tTKd3dCKhtuHFm. Accessed 19 October 2021.\n",
        "- Dionysiou, Antreas, and Elias Athanosopoulas. “SoK: Machine vs. machine – A systematic classification of automated machine learning-based CAPTCHA solvers.” Science Direct, 2020, https://doi.org/10.1016/j.cose.2020.101947. Accessed 20 October 2021.\n",
        "- D'Souza, Darryl, et al. “Avatar CAPTCHA: Telling computers and humans apart via face classification.” IEEE Explore, https://ieeexplore.ieee.org/abstract/document/6220734?casa_token=sSZdNq_N_lwAAAAA:sgEsWyH73KdwlP4LY3VQs-9cIHkTue6mWzlUpRLyEuYaWgyA_xsKYhOy5WgtSZkle_TsUWBp. Accessed 20 October 2021.\n",
        "- Guerar, Meriem, et al. “Gotta CAPTCHA ’Em All: A Survey of 20 Years of the Human-or-computer Dilemma.” ACM Digital Library, 2021, https://doi.org/10.1145/3477142. Accessed 20 October 2021.\n",
        "- Hammer, Barbara, et al. “Workshop New Challenges in Neural Computation 2015.” Machine Learning Reports, vol. 2015, 2015, http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.710.1085&rep=rep1&type=pdf#page=94.\n",
        "- Javier Hernández-Castro, Carlos, et al. “Using machine learning to identify common flaws in CAPTCHA design: FunCAPTCHA case analysis.” Science Direct, 2017, https://doi.org/10.1016/j.cose.2017.05.005. Accessed 21 October 2021.\n",
        "- Kopp, Martin, et al. “Breaking CAPTCHAs with Convolutional Neural Networks.” CEUR Workshop Proceedings, vol. 1885, no. ITAT 2017 Proceedings, 2017, pp. 93-99, http://ceur-ws.org/Vol-1885/93.pdf.\n",
        "- Lin, Dazhen, et al. “Chinese Character CAPTCHA Recognition and performance estimation via deep neural network.” Science Direct, May 2018, https://doi.org/10.1016/j.neucom.2017.02.105. Accessed 20 October 2021.\n",
        "- Yan, Jeff, and Ahmad Salah El Ahad. “Captcha Robustness: A Security Engineering Perspective.” IEEE Computer Society, vol. February 2011, 20121, pp. 54-60. Cite SeerX, https://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.383.8403&rep=rep1&type=pdf.\n",
        "\n"
      ],
      "id": "rbAVCJqmjswP"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "LCYsrfi-kC7f"
      },
      "source": [
        "# Data Preprocessing\n",
        "\n",
        "**Note :** We have done our project in Jupyter notebook as the data we chose was huge and uploading data to google drive was not possible. We have tried difernet ways to upload the data but none of them succeded. So we are installing some packages and this notebook is done in Jupyter notebook"
      ],
      "id": "LCYsrfi-kC7f"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "db8256f3",
        "outputId": "44318805-b8d6-464b-8f7a-d318249e068d"
      },
      "source": [
        "pip install keras #Installing keras package"
      ],
      "id": "db8256f3",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: keras in c:\\users\\bulli\\anaconda3\\lib\\site-packages (2.6.0)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a3b7023d",
        "outputId": "a38497b0-9aec-428d-b2cd-451bd76bdf6e"
      },
      "source": [
        "pip install tensorflow #installing tensorflow package"
      ],
      "id": "a3b7023d",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Requirement already satisfied: tensorflow in c:\\users\\bulli\\anaconda3\\lib\\site-packages (2.6.0)\n",
            "Requirement already satisfied: protobuf>=3.9.2 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (3.19.0)\n",
            "Requirement already satisfied: typing-extensions~=3.7.4 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (3.7.4.3)\n",
            "Requirement already satisfied: tensorboard~=2.6 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (2.7.0)\n",
            "Requirement already satisfied: flatbuffers~=1.12.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.12)\n",
            "Requirement already satisfied: numpy~=1.19.2 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.19.5)\n",
            "Requirement already satisfied: google-pasta~=0.2 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (0.2.0)\n",
            "Requirement already satisfied: h5py~=3.1.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (3.1.0)\n",
            "Requirement already satisfied: wheel~=0.35 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (0.36.2)\n",
            "Requirement already satisfied: gast==0.4.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (0.4.0)\n",
            "Requirement already satisfied: grpcio<2.0,>=1.37.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.41.0)\n",
            "Requirement already satisfied: tensorflow-estimator~=2.6 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (2.6.0)\n",
            "Requirement already satisfied: clang~=5.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (5.0)\n",
            "Requirement already satisfied: opt-einsum~=3.3.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (3.3.0)\n",
            "Requirement already satisfied: wrapt~=1.12.1 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.12.1)\n",
            "Requirement already satisfied: keras-preprocessing~=1.1.2 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.1.2)\n",
            "Requirement already satisfied: astunparse~=1.6.3 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.6.3)\n",
            "Requirement already satisfied: absl-py~=0.10 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (0.15.0)\n",
            "Requirement already satisfied: six~=1.15.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.15.0)\n",
            "Requirement already satisfied: termcolor~=1.1.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (1.1.0)\n",
            "Requirement already satisfied: keras~=2.6 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorflow) (2.6.0)\n",
            "Requirement already satisfied: werkzeug>=0.11.15 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (1.0.1)\n",
            "Requirement already satisfied: google-auth-oauthlib<0.5,>=0.4.1 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (0.4.6)\n",
            "Requirement already satisfied: requests<3,>=2.21.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (2.25.1)\n",
            "Requirement already satisfied: markdown>=2.6.8 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (3.3.4)\n",
            "Requirement already satisfied: google-auth<3,>=1.6.3 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (2.3.0)\n",
            "Requirement already satisfied: setuptools>=41.0.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (52.0.0.post20210125)\n",
            "Requirement already satisfied: tensorboard-plugin-wit>=1.6.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (1.8.0)\n",
            "Requirement already satisfied: tensorboard-data-server<0.7.0,>=0.6.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from tensorboard~=2.6->tensorflow) (0.6.1)\n",
            "Requirement already satisfied: pyasn1-modules>=0.2.1 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard~=2.6->tensorflow) (0.2.8)\n",
            "Requirement already satisfied: rsa<5,>=3.1.4 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard~=2.6->tensorflow) (4.7.2)\n",
            "Requirement already satisfied: cachetools<5.0,>=2.0.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from google-auth<3,>=1.6.3->tensorboard~=2.6->tensorflow) (4.2.4)\n",
            "Requirement already satisfied: requests-oauthlib>=0.7.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.6->tensorflow) (1.3.0)\n",
            "Requirement already satisfied: pyasn1<0.5.0,>=0.4.6 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from pyasn1-modules>=0.2.1->google-auth<3,>=1.6.3->tensorboard~=2.6->tensorflow) (0.4.8)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard~=2.6->tensorflow) (2020.12.5)\n",
            "Requirement already satisfied: urllib3<1.27,>=1.21.1 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard~=2.6->tensorflow) (1.26.4)\n",
            "Requirement already satisfied: chardet<5,>=3.0.2 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard~=2.6->tensorflow) (4.0.0)\n",
            "Requirement already satisfied: idna<3,>=2.5 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from requests<3,>=2.21.0->tensorboard~=2.6->tensorflow) (2.10)\n",
            "Requirement already satisfied: oauthlib>=3.0.0 in c:\\users\\bulli\\anaconda3\\lib\\site-packages (from requests-oauthlib>=0.7.0->google-auth-oauthlib<0.5,>=0.4.1->tensorboard~=2.6->tensorflow) (3.1.1)\n",
            "Note: you may need to restart the kernel to use updated packages.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "04b62777"
      },
      "source": [
        "# importing all required modules for the project\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import matplotlib.pyplot as plt\n",
        "%matplotlib inline\n",
        "import os\n",
        "import shutil\n",
        "import keras\n",
        "\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.image import load_img, ImageDataGenerator\n",
        "from tensorflow.keras.models import Model, Sequential\n",
        "from tensorflow.keras.layers import Conv2D, BatchNormalization, MaxPooling2D, Dropout, Dense, Flatten"
      ],
      "id": "04b62777",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f4a1fbc2",
        "outputId": "741de0c1-4dcb-4c1e-cfd0-98dc8aa9cf50"
      },
      "source": [
        "keras.__version__ #Gives the versino of the keras we are using for the project"
      ],
      "id": "f4a1fbc2",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'2.6.0'"
            ]
          },
          "execution_count": 4,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "87a490a2"
      },
      "source": [
        "# storing the directory structure to read the train and test data from local directory\n",
        "train_dir = ('C:/Users/bulli/Downloads/DataSet/train')\n",
        "test_dir = ('C:/Users/bulli/Downloads/DataSet/test')"
      ],
      "id": "87a490a2",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c849afa3",
        "outputId": "eaa157ad-731e-463c-8c05-e7369e1bd84f"
      },
      "source": [
        "train_dir"
      ],
      "id": "c849afa3",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "'C:/Users/bulli/Downloads/DataSet/train'"
            ]
          },
          "execution_count": 6,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "62497d8a",
        "outputId": "52d48839-c4d7-414f-ac6d-219e1e09a532"
      },
      "source": [
        "train_dir = os.listdir('C:/Users/bulli/Downloads/DataSet/train')\n",
        "train_dir_len = len(train_dir)\n",
        "print(\"Length:\\t\", train_dir_len) #Checking the length of the data from the train data to check evrything is uploaded or not"
      ],
      "id": "62497d8a",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Length:\t 50000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "2b450b50",
        "outputId": "e64fab1c-33e5-4bd9-8ab5-36b14d1d9878"
      },
      "source": [
        "test_dir = os.listdir('C:/Users/bulli/Downloads/DataSet/train')\n",
        "test_dir_len = len(test_dir)\n",
        "print(\"Length:\\t\", test_dir_len) #Checking the length of the data from the train data to check evrything is uploaded or not"
      ],
      "id": "2b450b50",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Length:\t 50000\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7fb28c22"
      },
      "source": [
        "train_labels = pd.read_csv(\"C:/Users/bulli/Downloads/DataSet/trainLabels.csv\") #Reading the labels for train data\n",
        "train_images = pd.DataFrame(columns=['id', 'label', 'path'], dtype=str) #Creating a new dataframe to show us in an understandable way\n",
        "test_labels = pd.read_csv(\"C:/Users/bulli/Downloads/DataSet/sampleSubmission.csv\") #Readinf the test labels to check the accuarcy after training the model"
      ],
      "id": "7fb28c22",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b90ef3d8",
        "outputId": "8dc518c1-35e4-4ee6-f451-906c0f230272"
      },
      "source": [
        "train_root = ('C:/Users/bulli/Downloads/DataSet/train/')\n",
        "for i in range(0, train_dir_len):\n",
        "    path = train_root + str(i+1) + '.png'\n",
        "    if os.path.exists(path):\n",
        "        train_images = train_images.append([{\n",
        "            'id': train_labels['id'].iloc[i],\n",
        "            'label': train_labels['label'].iloc[i],\n",
        "            'path': str(i+1) + '.png'\n",
        "        }])\n",
        "        \n",
        "train_images.head()\n",
        "#This block of code is going to read the data and store all of it in the train_images dataframe from the dataset we have and shows the first 5 data.\n",
        "#This is going to be represented by the labels we have created in the before cell code."
      ],
      "id": "b90ef3d8",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>path</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>frog</td>\n",
              "      <td>1.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>truck</td>\n",
              "      <td>2.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>truck</td>\n",
              "      <td>3.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4</td>\n",
              "      <td>deer</td>\n",
              "      <td>4.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>automobile</td>\n",
              "      <td>5.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  id       label   path\n",
              "0  1        frog  1.png\n",
              "0  2       truck  2.png\n",
              "0  3       truck  3.png\n",
              "0  4        deer  4.png\n",
              "0  5  automobile  5.png"
            ]
          },
          "execution_count": 10,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "6ff9b67a",
        "outputId": "45c71b43-d0b5-4ca0-bfa4-76efedf6f81c"
      },
      "source": [
        "display_groupby = train_images.groupby(['label']).count()\n",
        "display_groupby.head(10) # Grouping all the images claasswise to show. We already know there are only 10 classes ater checking the csv files. So showing all of them."
      ],
      "id": "6ff9b67a",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>path</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>label</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>airplane</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>automobile</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>bird</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cat</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>deer</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dog</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>frog</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>horse</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ship</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>truck</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "              id  path\n",
              "label                 \n",
              "airplane    5000  5000\n",
              "automobile  5000  5000\n",
              "bird        5000  5000\n",
              "cat         5000  5000\n",
              "deer        5000  5000\n",
              "dog         5000  5000\n",
              "frog        5000  5000\n",
              "horse       5000  5000\n",
              "ship        5000  5000\n",
              "truck       5000  5000"
            ]
          },
          "execution_count": 11,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7d3c4289",
        "outputId": "49e8c077-39dd-4595-aed4-05f848156acc"
      },
      "source": [
        "class_names = ['airplane', 'automobile', 'bird', 'cat', 'deer', 'dog', 'frog', 'horse', 'ship', 'truck'] \n",
        "for name in class_names:\n",
        "    index = class_names.index(name)\n",
        "    train_images.loc[train_images['label'] == name, 'label'] = str(index)\n",
        "\n",
        "display_groupby = train_images.groupby(['label']).count()\n",
        "display_groupby.head(10)\n",
        "\n",
        "#Now we are going to index them and labeling them from 0 to 9 instead of using the names to make it easy for us in the future."
      ],
      "id": "7d3c4289",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>path</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>label</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>2</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>3</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>4</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>5</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>6</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>7</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>9</th>\n",
              "      <td>5000</td>\n",
              "      <td>5000</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "         id  path\n",
              "label            \n",
              "0      5000  5000\n",
              "1      5000  5000\n",
              "2      5000  5000\n",
              "3      5000  5000\n",
              "4      5000  5000\n",
              "5      5000  5000\n",
              "6      5000  5000\n",
              "7      5000  5000\n",
              "8      5000  5000\n",
              "9      5000  5000"
            ]
          },
          "execution_count": 12,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b8744182"
      },
      "source": [
        "BATCH_SIZE = 64\n",
        "NUM_CLASSES = 10"
      ],
      "id": "b8744182",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "88994866",
        "outputId": "ff3cfeb4-81cc-4e6c-cc9d-388059b134f8"
      },
      "source": [
        "train_images.head() #As we have labelled them before we are checking them here if the code has worked or not."
      ],
      "id": "88994866",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/html": [
              "<div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>id</th>\n",
              "      <th>label</th>\n",
              "      <th>path</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>1</td>\n",
              "      <td>6</td>\n",
              "      <td>1.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>2</td>\n",
              "      <td>9</td>\n",
              "      <td>2.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>3</td>\n",
              "      <td>9</td>\n",
              "      <td>3.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>4.png</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>5</td>\n",
              "      <td>1</td>\n",
              "      <td>5.png</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "</div>"
            ],
            "text/plain": [
              "  id label   path\n",
              "0  1     6  1.png\n",
              "0  2     9  2.png\n",
              "0  3     9  3.png\n",
              "0  4     4  4.png\n",
              "0  5     1  5.png"
            ]
          },
          "execution_count": 14,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "f1244893",
        "outputId": "776aa66b-4726-43ae-ce9a-0af60b6577b3"
      },
      "source": [
        "data_generator = ImageDataGenerator(rescale=1/255.,\n",
        "                                   validation_split=0.2,\n",
        "                                   horizontal_flip=True)\n",
        "\n",
        "train_generator = data_generator.flow_from_dataframe(dataframe=train_images, \n",
        "                                                    directory='C:/Users/bulli/Downloads/DataSet/train/',\n",
        "                                                    x_col='path',\n",
        "                                                     y_col='label',\n",
        "                                                     subset='training',\n",
        "                                                     batch_size=BATCH_SIZE,\n",
        "                                                     shuffle=True,\n",
        "                                                     target_size=(32,32),\n",
        "                                                     class_mode='categorical')\n",
        "\n",
        "validation_generator = data_generator.flow_from_dataframe(dataframe=train_images,\n",
        "                                                         directory='C:/Users/bulli/Downloads/DataSet/train/',\n",
        "                                                         x_col='path',\n",
        "                                                         y_col='label',\n",
        "                                                         subset='validation',\n",
        "                                                         batch_size=BATCH_SIZE,\n",
        "                                                         shuffle=True,\n",
        "                                                         target_size=(32,32),\n",
        "                                                         class_mode='categorical')"
      ],
      "id": "f1244893",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Found 40000 validated image filenames belonging to 10 classes.\n",
            "Found 10000 validated image filenames belonging to 10 classes.\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ab04385a"
      },
      "source": [
        "# Baseline model\n",
        "\n",
        "We couldn't do a mean-only baseline model since this is an image classification problem, so we opted for a very simple convolutional network with two convolutional layer and two maxpool layer."
      ],
      "id": "ab04385a"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "aa626393"
      },
      "source": [
        "model = Sequential() #Creating a sequential layer\n",
        "\n",
        "# Convolution layer1\n",
        "# The shape of input image is 32 x 32. \n",
        "model.add(Conv2D(32, kernel_size=3, activation='relu', padding='same', input_shape=(32,32,3)))\n",
        "\n",
        "# MaxPooling layer1\n",
        "model.add(MaxPooling2D())\n",
        "\n",
        "# Convolution layer2\n",
        "model.add(Conv2D(32, kernel_size=3, activation='relu', padding='same'))\n",
        "\n",
        "# MaxPooling layer2\n",
        "model.add(MaxPooling2D())\n",
        "\n",
        "model.add(Flatten()) #Flatten layer\n",
        "model.add(Dense(128, activation='relu')) # Dense layer with an relu activation function\n",
        "model.add(Dropout(0.4))\n",
        "model.add(Dense(10, activation='softmax')) # Dense layer with an softmax activation function"
      ],
      "id": "aa626393",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "7f17afa7"
      },
      "source": [
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer='Adam',\n",
        "              metrics=['accuracy'])\n",
        "# Compiling the model we created with loss calculated as categorical cross entropy and using the Adam optimizer and using the accuracy metrics"
      ],
      "id": "7f17afa7",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "e6d08a2a"
      },
      "source": [
        "import time # importing the time library"
      ],
      "id": "e6d08a2a",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "38d9fd09",
        "outputId": "37322b57-c5b5-4fe7-d127-f6aa79153f5b"
      },
      "source": [
        "start = time.time()\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=10, # ideally...len(trainX) // BS == 2000/20  == 100\n",
        "      epochs=10,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=10)  # ideally...len(valX) // BS == 1000/20 == 50\n",
        "                            # Total number of steps (batches of samples) to validate before stopping.\n",
        "\n",
        "end = time.time()\n",
        "print(end - start)\n",
        "\n",
        "#Fitting the model we created and checking the loss and accuracies for the train data and validating them by running a 10 step epochs for 10 times."
      ],
      "id": "38d9fd09",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "10/10 [==============================] - 17s 2s/step - loss: 2.3220 - accuracy: 0.0859 - val_loss: 2.2839 - val_accuracy: 0.1125\n",
            "Epoch 2/10\n",
            "10/10 [==============================] - 14s 1s/step - loss: 2.2745 - accuracy: 0.1406 - val_loss: 2.2571 - val_accuracy: 0.1391\n",
            "Epoch 3/10\n",
            "10/10 [==============================] - 13s 1s/step - loss: 2.2306 - accuracy: 0.1672 - val_loss: 2.1555 - val_accuracy: 0.2484\n",
            "Epoch 4/10\n",
            "10/10 [==============================] - 15s 2s/step - loss: 2.1441 - accuracy: 0.2188 - val_loss: 2.1216 - val_accuracy: 0.2219\n",
            "Epoch 5/10\n",
            "10/10 [==============================] - 13s 1s/step - loss: 2.1571 - accuracy: 0.2047 - val_loss: 2.0814 - val_accuracy: 0.2344\n",
            "Epoch 6/10\n",
            "10/10 [==============================] - 12s 1s/step - loss: 2.0623 - accuracy: 0.2188 - val_loss: 1.9979 - val_accuracy: 0.3187\n",
            "Epoch 7/10\n",
            "10/10 [==============================] - 12s 1s/step - loss: 2.0257 - accuracy: 0.2453 - val_loss: 1.9706 - val_accuracy: 0.3016\n",
            "Epoch 8/10\n",
            "10/10 [==============================] - 12s 1s/step - loss: 1.9576 - accuracy: 0.3016 - val_loss: 1.8618 - val_accuracy: 0.3562\n",
            "Epoch 9/10\n",
            "10/10 [==============================] - 12s 1s/step - loss: 1.9743 - accuracy: 0.2609 - val_loss: 1.8746 - val_accuracy: 0.3578\n",
            "Epoch 10/10\n",
            "10/10 [==============================] - 13s 1s/step - loss: 1.9057 - accuracy: 0.2984 - val_loss: 1.8352 - val_accuracy: 0.3734\n",
            "133.39847564697266\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "0735ab26",
        "outputId": "bbf9085c-e624-4426-9700-5d8c81256462"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "\n",
        "#Plotting the Accuracy and loss of validation and Training ."
      ],
      "id": "0735ab26",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "4k9sDtGXoLT5"
      },
      "source": [
        "The baseline model has an accuracy of almost 30%. Perhaps it could be better with more epochs, except our computing power is limited. This suggests that a baseline model would not do very good job at breaking through CAPTCHA security. We don't believe this is too alarming, since CAPTCHA companies can create a series of CAPTCHA tests that would reduce the likelihood a machine or AI will successfully pass every single test."
      ],
      "id": "4k9sDtGXoLT5"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "0abd72f3"
      },
      "source": [
        "# Model 1: Vanilla Neural Network"
      ],
      "id": "0abd72f3"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "458c69f8"
      },
      "source": [
        "#from keras.models import Sequential\n",
        "#from keras.layers import Dense, Conv2D, MaxPool2D, Flatten\n",
        "\n",
        "#model = Sequential()\n",
        "#model.add(Conv2D(32, kernel_size=(3,3), activation='relu', input_shape=(32,32,3)))\n",
        "#model.add(MaxPool2D())\n",
        "#model.add(Conv2D(32, kernel_size=(3,3), activation='relu'))\n",
        "#model.add(MaxPool2D())\n",
        "#model.add(Conv2D(32, kernel_size=(3,3), activation='relu'))\n",
        "#model.add(MaxPool2D())\n",
        "#model.add(Flatten())\n",
        "#model.add(Dense(128, activation='relu'))\n",
        "#model.add(Dropout(0.4))\n",
        "#model.add(Dense(10, activation='sigmoid'))\n",
        "\n",
        "model = Sequential() #Creating a sequential layer\n",
        "model.add(Conv2D(filters=32,kernel_size=(3,3),activation='relu',input_shape=(32,32,3))) #1st Convolutional layer with 32 * 32 image size.\n",
        "model.add(MaxPool2D()) # 1st maxpooling layer\n",
        "model.add(Conv2D(filters=64,kernel_size=(3,3),activation='relu')) #2nd Convolutional layer with 32 * 32 image size.\n",
        "model.add(MaxPool2D()) # 2nd maxpooling layer\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Conv2D(filters=128,kernel_size=(3,3),activation='relu')) #3rd Convolutional layer with 32 * 32 image size.\n",
        "model.add(MaxPool2D()) # 3rd maxpooling layer\n",
        "model.add(Dropout(0.5))\n",
        "model.add(Flatten()) #Flatten layer\n",
        "model.add(Dense(512, activation='relu')) #Dense layer with relu activation function\n",
        "model.add(Dense(10, activation='softmax')) ##Dense layer with relu activation function"
      ],
      "id": "458c69f8",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "c1ea2193"
      },
      "source": [
        "model.compile(loss='categorical_crossentropy',\n",
        "              optimizer='Adam',\n",
        "              metrics=['accuracy'])\n",
        "# Compiling the model we created with loss calculated as categorical cross entropy and using the Adam optimizer and using the accuracy metrics"
      ],
      "id": "c1ea2193",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "9ce4c892",
        "outputId": "d83551a9-582e-4334-ece0-cf28d8683e10"
      },
      "source": [
        "start = time.time()\n",
        "\n",
        "history = model.fit(\n",
        "      train_generator,\n",
        "      steps_per_epoch=100,\n",
        "      epochs=20,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=100)\n",
        "\n",
        "end = time.time()\n",
        "print(end - start)\n",
        "#Fitting the model we created and checking the loss and accuracies for the train data and validating them by running a 100 step epochs for 20 times."
      ],
      "id": "9ce4c892",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/20\n",
            "100/100 [==============================] - 53s 529ms/step - loss: 1.6915 - accuracy: 0.3727 - val_loss: 1.5497 - val_accuracy: 0.4427\n",
            "Epoch 2/20\n",
            "100/100 [==============================] - 43s 431ms/step - loss: 1.6177 - accuracy: 0.3956 - val_loss: 1.5084 - val_accuracy: 0.4611\n",
            "Epoch 3/20\n",
            "100/100 [==============================] - 37s 370ms/step - loss: 1.5592 - accuracy: 0.4177 - val_loss: 1.4608 - val_accuracy: 0.4744\n",
            "Epoch 4/20\n",
            "100/100 [==============================] - 34s 342ms/step - loss: 1.5159 - accuracy: 0.4416 - val_loss: 1.4166 - val_accuracy: 0.4944\n",
            "Epoch 5/20\n",
            "100/100 [==============================] - 26s 263ms/step - loss: 1.4861 - accuracy: 0.4656 - val_loss: 1.3852 - val_accuracy: 0.5073\n",
            "Epoch 6/20\n",
            "100/100 [==============================] - 26s 257ms/step - loss: 1.4416 - accuracy: 0.4672 - val_loss: 1.3802 - val_accuracy: 0.5086\n",
            "Epoch 7/20\n",
            "100/100 [==============================] - 23s 230ms/step - loss: 1.4477 - accuracy: 0.4700 - val_loss: 1.3218 - val_accuracy: 0.5203\n",
            "Epoch 8/20\n",
            "100/100 [==============================] - 22s 217ms/step - loss: 1.3764 - accuracy: 0.4966 - val_loss: 1.2830 - val_accuracy: 0.5441\n",
            "Epoch 9/20\n",
            "100/100 [==============================] - 19s 191ms/step - loss: 1.3992 - accuracy: 0.4839 - val_loss: 1.2819 - val_accuracy: 0.5353\n",
            "Epoch 10/20\n",
            "100/100 [==============================] - 16s 164ms/step - loss: 1.3748 - accuracy: 0.4958 - val_loss: 1.2869 - val_accuracy: 0.5395\n",
            "Epoch 11/20\n",
            "100/100 [==============================] - 16s 158ms/step - loss: 1.3515 - accuracy: 0.5100 - val_loss: 1.2347 - val_accuracy: 0.5747\n",
            "Epoch 12/20\n",
            "100/100 [==============================] - 15s 154ms/step - loss: 1.3462 - accuracy: 0.5072 - val_loss: 1.2157 - val_accuracy: 0.5697\n",
            "Epoch 13/20\n",
            "100/100 [==============================] - 15s 147ms/step - loss: 1.3380 - accuracy: 0.5120 - val_loss: 1.2255 - val_accuracy: 0.5805\n",
            "Epoch 14/20\n",
            "100/100 [==============================] - 14s 139ms/step - loss: 1.3246 - accuracy: 0.5188 - val_loss: 1.2217 - val_accuracy: 0.5631\n",
            "Epoch 15/20\n",
            "100/100 [==============================] - 13s 132ms/step - loss: 1.2914 - accuracy: 0.5297 - val_loss: 1.1981 - val_accuracy: 0.5820\n",
            "Epoch 16/20\n",
            "100/100 [==============================] - 14s 135ms/step - loss: 1.3185 - accuracy: 0.5231 - val_loss: 1.1901 - val_accuracy: 0.5847\n",
            "Epoch 17/20\n",
            "100/100 [==============================] - 12s 120ms/step - loss: 1.2736 - accuracy: 0.5419 - val_loss: 1.1465 - val_accuracy: 0.6133\n",
            "Epoch 18/20\n",
            "100/100 [==============================] - 12s 124ms/step - loss: 1.2487 - accuracy: 0.5448 - val_loss: 1.1416 - val_accuracy: 0.6034\n",
            "Epoch 19/20\n",
            "100/100 [==============================] - 12s 122ms/step - loss: 1.2373 - accuracy: 0.5519 - val_loss: 1.1448 - val_accuracy: 0.6047\n",
            "Epoch 20/20\n",
            "100/100 [==============================] - 12s 115ms/step - loss: 1.2335 - accuracy: 0.5517 - val_loss: 1.1514 - val_accuracy: 0.6028\n",
            "434.8147885799408\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "a0f7bc07",
        "outputId": "dd6f20ce-34da-45c3-a0d5-3b1274060860"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "#Plotting the Accuracy and loss of validation and Training ."
      ],
      "id": "a0f7bc07",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "EZ2pz_3vo2mv"
      },
      "source": [
        "This vanilla neural network has an accuracy of 55%, which is not great, although if we allowed for more epochs, it would likely be better. However, computing power is limited.\n",
        "\n",
        "We believe this poses a more significant threat than the baseline model since it is more accurate. Considering this, we would recommend more image sets in order to throw off the machine or AI's identification algorithms (aka, our model)."
      ],
      "id": "EZ2pz_3vo2mv"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "8m-PbxdTkZ38"
      },
      "source": [
        "# Model 2"
      ],
      "id": "8m-PbxdTkZ38"
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1ac550ae"
      },
      "source": [
        "model = Sequential() #Creating a sequential layer\n",
        "model.add(Conv2D(32, kernel_size=3, activation='relu', padding='same', input_shape=(32,32,3))) #1st convolutional layer with 32*32 input \n",
        "model.add(Conv2D(32, kernel_size=3, activation='relu', padding='same')) #2nd convolutional layer\n",
        "model.add(MaxPooling2D()) #1st Maxpool Layer\n",
        "model.add(Dropout(0.2))\n",
        "\n",
        "model.add(Conv2D(64, kernel_size=3, activation='relu', padding='same')) #3rd convolutional layer\n",
        "model.add(Conv2D(64, kernel_size=3, activation='relu', padding='same')) #4th convolutional layer\n",
        "model.add(MaxPooling2D()) #2nd Maxpool Layer\n",
        "model.add(Dropout(0.3))\n",
        "\n",
        "model.add(Conv2D(128, kernel_size=3, activation='relu', padding='same')) #5th convolutional layer\n",
        "model.add(Conv2D(128, kernel_size=3, activation='relu', padding='same')) #5th convolutional layer\n",
        "model.add(MaxPooling2D()) #3rd Maxpool Layer\n",
        "model.add(Dropout(0.4))\n",
        "\n",
        "model.add(Flatten()) #Flatten layer\n",
        "model.add(Dense(128, activation='relu')) #Dense layer with relu activation function\n",
        "model.add(Dropout(0.4))\n",
        "model.add(Dense(10, activation='softmax')) #Dense layer with softmax activation function\n",
        "\n",
        "model.compile(loss='categorical_crossentropy', optimizer=tf.keras.optimizers.Adam(0.001), metrics=['accuracy'])\n",
        "# Compiling the model we created with loss calculated as categorical cross entropy and using the Adam optimizer and using the accuracy metrics"
      ],
      "id": "1ac550ae",
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cde6fffe",
        "outputId": "fb737721-5163-48f9-e3d9-e2c83ac1c709"
      },
      "source": [
        "model.summary() #Gives the summary of the above model by showing the output shape of each layer and also gives the number of trainable parameters"
      ],
      "id": "cde6fffe",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Model: \"sequential_4\"\n",
            "_________________________________________________________________\n",
            "Layer (type)                 Output Shape              Param #   \n",
            "=================================================================\n",
            "conv2d_12 (Conv2D)           (None, 32, 32, 32)        896       \n",
            "_________________________________________________________________\n",
            "conv2d_13 (Conv2D)           (None, 32, 32, 32)        9248      \n",
            "_________________________________________________________________\n",
            "max_pooling2d_12 (MaxPooling (None, 16, 16, 32)        0         \n",
            "_________________________________________________________________\n",
            "dropout_1 (Dropout)          (None, 16, 16, 32)        0         \n",
            "_________________________________________________________________\n",
            "conv2d_14 (Conv2D)           (None, 16, 16, 64)        18496     \n",
            "_________________________________________________________________\n",
            "conv2d_15 (Conv2D)           (None, 16, 16, 64)        36928     \n",
            "_________________________________________________________________\n",
            "max_pooling2d_13 (MaxPooling (None, 8, 8, 64)          0         \n",
            "_________________________________________________________________\n",
            "dropout_2 (Dropout)          (None, 8, 8, 64)          0         \n",
            "_________________________________________________________________\n",
            "conv2d_16 (Conv2D)           (None, 8, 8, 128)         73856     \n",
            "_________________________________________________________________\n",
            "conv2d_17 (Conv2D)           (None, 8, 8, 128)         147584    \n",
            "_________________________________________________________________\n",
            "max_pooling2d_14 (MaxPooling (None, 4, 4, 128)         0         \n",
            "_________________________________________________________________\n",
            "dropout_3 (Dropout)          (None, 4, 4, 128)         0         \n",
            "_________________________________________________________________\n",
            "flatten_4 (Flatten)          (None, 2048)              0         \n",
            "_________________________________________________________________\n",
            "dense_6 (Dense)              (None, 128)               262272    \n",
            "_________________________________________________________________\n",
            "dropout_4 (Dropout)          (None, 128)               0         \n",
            "_________________________________________________________________\n",
            "dense_7 (Dense)              (None, 10)                1290      \n",
            "=================================================================\n",
            "Total params: 550,570\n",
            "Trainable params: 550,570\n",
            "Non-trainable params: 0\n",
            "_________________________________________________________________\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "b42b63a1",
        "outputId": "ffb0581f-0ccd-4f20-fa85-8b477879d8fa"
      },
      "source": [
        "train_step_per_epoch = 40000/64\n",
        "train_step_per_epoch #Calculating the ideal number of steps for training "
      ],
      "id": "b42b63a1",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "625.0"
            ]
          },
          "execution_count": 50,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "04bb88e0",
        "outputId": "5d5b6664-160a-491e-ad7d-87c7111c92e9"
      },
      "source": [
        "validation_steps_per_epoch = 10000/64\n",
        "validation_steps_per_epoch #Calculating the ideal number of steps for Validation "
      ],
      "id": "04bb88e0",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "text/plain": [
              "156.25"
            ]
          },
          "execution_count": 51,
          "metadata": {},
          "output_type": "execute_result"
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "cc1935b7",
        "outputId": "f6cc2d09-edeb-43f1-efe6-8bc24988349c"
      },
      "source": [
        "start = time.time()\n",
        "\n",
        "history = model.fit_generator(\n",
        "      train_generator,\n",
        "      steps_per_epoch=625, # ideally...len(trainX) // BS == 40000/64  == 625\n",
        "      epochs=10,\n",
        "      validation_data=validation_generator,\n",
        "      validation_steps=156)  # ideally...len(valX) // BS == 10000/64 == 156.25\n",
        "                            # Total number of steps (batches of samples) to validate before stopping.\n",
        "\n",
        "end = time.time()\n",
        "print(end - start)\n",
        "#After doing some research we got toknow that the idela number of epoch is 11 for many models and when we tried that the time taken \n",
        "#for the performing each step is higher and we have to consider efficiency along with the accuracy. So we treid wit h10 and it gives us \n",
        "#good accuracy scores and ideal times."
      ],
      "id": "cc1935b7",
      "execution_count": null,
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Epoch 1/10\n",
            "625/625 [==============================] - 576s 918ms/step - loss: 1.8172 - accuracy: 0.3232 - val_loss: 1.4106 - val_accuracy: 0.4757\n",
            "Epoch 2/10\n",
            "625/625 [==============================] - 225s 360ms/step - loss: 1.3839 - accuracy: 0.4953 - val_loss: 1.1494 - val_accuracy: 0.5799\n",
            "Epoch 3/10\n",
            "625/625 [==============================] - 199s 319ms/step - loss: 1.1848 - accuracy: 0.5767 - val_loss: 0.9967 - val_accuracy: 0.6344\n",
            "Epoch 4/10\n",
            "625/625 [==============================] - 174s 278ms/step - loss: 1.0657 - accuracy: 0.6239 - val_loss: 0.9168 - val_accuracy: 0.6705\n",
            "Epoch 5/10\n",
            "625/625 [==============================] - 182s 291ms/step - loss: 0.9785 - accuracy: 0.6562 - val_loss: 0.8218 - val_accuracy: 0.6976\n",
            "Epoch 6/10\n",
            "625/625 [==============================] - 187s 300ms/step - loss: 0.9261 - accuracy: 0.6734 - val_loss: 0.8111 - val_accuracy: 0.7051\n",
            "Epoch 7/10\n",
            "625/625 [==============================] - 197s 316ms/step - loss: 0.8784 - accuracy: 0.6919 - val_loss: 0.7654 - val_accuracy: 0.7274\n",
            "Epoch 8/10\n",
            "625/625 [==============================] - 211s 338ms/step - loss: 0.8383 - accuracy: 0.7092 - val_loss: 0.7264 - val_accuracy: 0.7449\n",
            "Epoch 9/10\n",
            "625/625 [==============================] - 189s 302ms/step - loss: 0.8066 - accuracy: 0.7179 - val_loss: 0.7024 - val_accuracy: 0.7448\n",
            "Epoch 10/10\n",
            "625/625 [==============================] - 196s 313ms/step - loss: 0.7877 - accuracy: 0.7279 - val_loss: 0.6972 - val_accuracy: 0.7596\n",
            "2337.1551299095154\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "scrolled": true,
        "id": "52a42d42",
        "outputId": "d692780c-4432-497b-f830-f9005478bc6c"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "\n",
        "acc = history.history['accuracy']\n",
        "val_acc = history.history['val_accuracy']\n",
        "loss = history.history['loss']\n",
        "val_loss = history.history['val_loss']\n",
        "\n",
        "epochs = range(len(acc))\n",
        "\n",
        "plt.plot(epochs, acc, 'bo', label='Training acc')\n",
        "plt.plot(epochs, val_acc, 'b', label='Validation acc')\n",
        "plt.title('Training and validation accuracy')\n",
        "plt.legend()\n",
        "\n",
        "plt.figure()\n",
        "\n",
        "plt.plot(epochs, loss, 'bo', label='Training loss')\n",
        "plt.plot(epochs, val_loss, 'b', label='Validation loss')\n",
        "plt.title('Training and validation loss')\n",
        "plt.legend()\n",
        "\n",
        "plt.show()\n",
        "#Plotting the Accuracy and loss of validation and Training ."
      ],
      "id": "52a42d42",
      "execution_count": null,
      "outputs": [
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        },
        {
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          },
          "output_type": "display_data"
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "27525d61"
      },
      "source": [
        "#### We got an accuracy of 78%.\n",
        "\n",
        "- This is our most rigorous model, where we really pulled out all the stops in order to successfully bypass CAPTCHA security using deep learning.\n",
        "\n",
        "- We can see that our model is fairly accurate as we run more epochs. The loss decreases and the accuracy improves.\n",
        "\n",
        "- Unfortunately, we were unable to figure out the code for a confusion matrix for a multiclass problem like this one. It means we're unable to recommend a specific kind of image that perhaps our model struggles with, but again, we also think simply adding more kinds of images will improve security. In our personal experiences, almost all CAPTCHA programs ask for the same things: roads, streetlights, ships, etc.\n",
        "\n",
        "- Although a 78% is not technically that high for accuracy, considering how many times a day a CAPTCHA is used to test whether a user is human or not... That's an awfully large amount of machines that can slip through the security system. And that's with our model, one made by students and not professional, highly experienced coders. This suggests to us that CAPTCHA companies could consider rotating the kinds of pictures they use more often; this might be a more affordable option than the last recommendation we made.\n",
        "\n",
        "- All of our recommendations here can be combined with the earlier recommendation of including a larger number of CAPTCHA tests in one test to reduce the probability a machine/AI can consistently succeed. Humans should still have no problem passing, so that's not to worry about. We also think that companies can consider blocking any users who fail a CAPTCHA test more than two times; that should serve as a helpful security net.\n"
      ],
      "id": "27525d61"
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "RuLqBGBdlc8q"
      },
      "source": [
        "# Conclusion\n",
        "\n",
        "- We learned that big image datasets are hard to work with in Google Drive, and we would definitely be more careful about that in the future so as to not create an extra burden on our shoulders.\n",
        "\n",
        "- We explored the issue of how CAPTCHA companies need to continuously up their systems in order to fend off the rising intelligence of AIs and machine learning models.\n",
        "\n",
        "- We experimented with the parameters and other options to ensure our models were as accurate as possible.\n",
        "\n",
        "- We built two models and compared it with a baseline model to see how accurate we were. Given how accurate we were, we brainstormed for solutions companies could possibly take advantage of when refining CAPTCHAs.\n",
        "\n",
        "- We struggled with the multiclass confusion matrix, so we opted to provide more macro-level solutions to address our business problem. We solved our business problem by providing models that, to varying levels of success, bypassed CAPTCHA security, which could be used by companies to continuously test their CAPTCHA system. Then, we thought of the above mentioned solutions which we'll outline here again:\n",
        "\n",
        "    1) Maintain a rotation of different kinds of CAPTCHA pictures.\n",
        "\n",
        "    2) Include more image types beyond the common ones about geography and traveling.\n",
        "\n",
        "    3) Increase the number of CAPTCHA tests in one test.\n",
        "\n",
        "    4) And lock any users who fail more than 2 CAPTCHA tests in a row."
      ],
      "id": "RuLqBGBdlc8q"
    }
  ]
}